// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: admins.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins(
    user_name
) VALUES (
    $1
) RETURNING admin_id, user_name
`

func (q *Queries) CreateAdmin(ctx context.Context, userName sql.NullString) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, userName)
	var i Admin
	err := row.Scan(&i.AdminID, &i.UserName)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins
WHERE admin_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, adminID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, adminID)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT admin_id, user_name FROM admins
WHERE admin_id = $1
`

func (q *Queries) GetAdmin(ctx context.Context, adminID int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, adminID)
	var i Admin
	err := row.Scan(&i.AdminID, &i.UserName)
	return i, err
}

const listAdmin = `-- name: ListAdmin :many
SELECT admin_id, user_name FROM admins
WHERE user_name = $1
ORDER BY admin_id
LIMIT $2
OFFSET $3
`

type ListAdminParams struct {
	UserName sql.NullString `json:"user_name"`
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
}

func (q *Queries) ListAdmin(ctx context.Context, arg ListAdminParams) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmin, arg.UserName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(&i.AdminID, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :one
UPDATE admins
SET user_name = $2
WHERE admin_id = $1
RETURNING admin_id, user_name
`

type UpdateAdminParams struct {
	AdminID  int64          `json:"admin_id"`
	UserName sql.NullString `json:"user_name"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdmin, arg.AdminID, arg.UserName)
	var i Admin
	err := row.Scan(&i.AdminID, &i.UserName)
	return i, err
}
